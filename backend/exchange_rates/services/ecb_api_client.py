import json
import logging
import io
import requests
import pandas as pd

logger = logging.getLogger("buho_backend")


class EcbApiClientError(Exception):
    pass


class EcbApiClient:
    def __init__(self) -> None:
        self.endpoint = "https://sdw-wsrest.ecb.europa.eu/service/"
        self.resource = "data"
        self.flow_ref = "EXR"
        self.session = requests.Session()

    def build_endpoint_url(self, from_currency: str, to_currency: str) -> str:
        """Generates the endpoint URL for the ECB API

        Args:
            from_currency (str): Origin currency
            to_currency (str): Target currency

        Returns:
            str: Endpoint and path to the ECB API
        """
        key = f"D.{from_currency}.{to_currency}.SP00.A"
        return self.endpoint + self.resource + "/" + self.flow_ref + "/" + key

    def get_exchange_rate_for_date(
        self, from_currency: str, to_currency: str, exchange_date: str
    ) -> dict:
        """Get the exchange rate for a given date from the ECB API

        Args:
            from_currency (str): Origin currency
            to_currency (str): Target currency
            exchange_date (str): Date of the transaction (YYYY-MM-DD)

        Returns:
            dict: A dict with the exchange rate data
        """
        request_url = self.build_endpoint_url(from_currency, to_currency)

        logger.debug("Call the exchange API")
        logger.debug(f"From: {from_currency} To: {to_currency} Date: {exchange_date}")

        parameters = {
            "startPeriod": exchange_date,
            "endPeriod": exchange_date,
            "format": "csvdata",
        }
        response = requests.get(request_url, params=parameters, timeout=4)

        if response.text == "":
            logger.warning(f"No exchange rate found for the date {exchange_date}")
            return None

        logger.debug(f"Response text: {response.text}")
        parsed_response = self.parse_csv_data(response.text)

        if parsed_response:
            value = parsed_response["OBS_VALUE"][exchange_date]
            result = self.exchange_rate_as_dict(
                from_currency, to_currency, exchange_date, value
            )
            return result
        return None

    def parse_csv_data(self, csv_data: str) -> dict:
        """Parses the CSV data from the ECB API into a dict

        Args:
            csv_data (str): CSV data returned by the API

        Returns:
            dict: JSON data generated by Pandas
        """
        data_frame = pd.read_csv(io.StringIO(csv_data))
        time_series = data_frame.filter(["TIME_PERIOD", "OBS_VALUE"], axis=1)
        time_series = time_series.set_index("TIME_PERIOD")
        result = time_series.to_json()

        return json.loads(result)

    def exchange_rate_as_dict(
        self,
        from_currency: str,
        to_currency: str,
        exchange_date: str,
        exchange_rate_value: str,
    ) -> dict:
        data = {
            "exchange_from": from_currency,
            "exchange_to": to_currency,
            "exchange_date": exchange_date,
            "exchange_rate": round(exchange_rate_value, 3),
        }
        return data
